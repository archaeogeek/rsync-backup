#!/bin/bash
# Objective:  Handles rSync
# Original: Author Russ Thompson @ viGeek.net
# Adaptations: Jo Cook

# Log & Email params... assumes use of sstmp- edit email command (line 44) if not
LOGF="$(pwd)/rsync-results.log"
ETO="youremail@domain.com"
ESUB="$(hostname -s) - rSync - FAILURE"
EFILE="msg.txt"

# Rsync options
SRC="/yoursource" #edit this
DEST="/yourdest" #edit this
OPTS="-aAXv" #change if you like
EXCLUDEFILE="exclude-file.txt"



# Make initial log entry...
echo "rSyncd script kicked off at $(date) by $(whoami)" >> $LOGF


# This deletes rsync-results.log after xyz (to prevent buildup)
find $LOGF -mtime +30 -exec rm {} \;
# Can also be deleted via size parameters

function trap_clean {
    # Error handling- only email if there's a problem
    echo "$(hostname) caught error on line $LINENO at $(date +%l:%M%p) via script $(basename $0)" | tee -a $EFILE $LOGF
    echo "Please see the tail end of $LOGF for additional error details..." >> $EFILE
    /usr/sbin/ssmtp $ETO < $EFILE
}

# Defined trap conditions
trap trap_clean ERR SIGHUP SIGINT SIGTERM

# Construct rsync command from variables, echo it to command line then run it
# Skip permissions errors (code 23) as we don't care about them, otherwise report error
echo "rsync $OPTS --exclude-from $EXCLUDEFILE $SRC $DEST"
/usr/bin/rsync $OPTS --exclude-from $EXCLUDEFILE $SRC $DEST 2>> $LOGF || $(case "$?" in 0|23) exit 0 ;; *) exit $?; esac)

# Fill log with line for easy reading
echo "--------------------------------------------------------------------------------------------------------------" >> $LOGF



# Cleanup our e-mail template file
sed -i".bak" '5,$d' $EFILE

